-- Create the User table
CREATE TABLE User (
    userID BIGINT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL
);

-- Insert sample data into the User table
INSERT INTO User (email, username, password, role) VALUES
('alice@example.com', 'Alice', 'password123', 'admin'),
('bob@example.com', 'Bob', 'password456', 'user'),
('carol@example.com', 'Carol', 'password789', 'moderator');


-- Create the Entitlement table
CREATE TABLE Entitlement (
    entID VARCHAR(50) PRIMARY KEY,
    entName VARCHAR(100) NOT NULL,
    ownerID BIGINT,
    permissions VARCHAR(255),
    riskTier BIGINT,
    pbl VARCHAR(50),
    FOREIGN KEY (ownerID) REFERENCES User(userID)
);

-- Insert sample data into the Entitlement table
INSERT INTO Entitlement (entID, entName, ownerID, permissions, riskTier, pbl) VALUES
('ENT001', 'Admin Access', 1, 'READ, WRITE', 1, 'PBL001'),
('ENT002', 'User Access', 2, 'READ', 3, 'PBL002'),
('ENT003', 'Moderator Access', 3, 'READ, WRITE, DELETE', 2, 'PBL003');


-- Create the Request table
CREATE TABLE Request (
    requestID BIGINT AUTO_INCREMENT PRIMARY KEY,
    userID BIGINT,
    entID VARCHAR(50),
    reason VARCHAR(255),
    accessGiven BOOLEAN,
    FOREIGN KEY (userID) REFERENCES User(userID),
    FOREIGN KEY (entID) REFERENCES Entitlement(entID)
);

-- Insert sample data into the Request table
INSERT INTO Request (userID, entID, reason, accessGiven) VALUES
(1, 'ENT001', 'Need admin access for project', TRUE),
(2, 'ENT002', 'Standard user access', TRUE),
(3, 'ENT003', 'Moderator access for forum management', FALSE);


-- Create the AnomalyLog table
CREATE TABLE AnomalyLog (
    anomalyID BIGINT AUTO_INCREMENT PRIMARY KEY,
    anomalyType VARCHAR(100),
    entID VARCHAR(50),
    status VARCHAR(50),
    auto BOOLEAN,
    comments VARCHAR(255),
    incorrectRiskTier BIGINT,
    correctRiskTier BIGINT,
    startTime TIMESTAMP,
    endTime TIMESTAMP,
    FOREIGN KEY (entID) REFERENCES Entitlement(entID)
);

-- Insert sample data into the AnomalyLog table
INSERT INTO AnomalyLog (anomalyType, entID, status, auto, comments, incorrectRiskTier, correctRiskTier, startTime, endTime) VALUES
('Type1', 'ENT001', 'Open', TRUE, 'Detected abnormal access', 1, 3, '2024-06-01 08:00:00', '2024-06-01 09:00:00'),
('Type2', 'ENT002', 'Closed', FALSE, 'Permission mismatch', 2, 3, '2024-06-01 10:00:00', '2024-06-01 11:00:00'),
('Type3', 'ENT003', 'Open', TRUE, 'Unauthorized changes', 1, 2, '2024-06-01 12:00:00', '2024-06-01 13:00:00');


-- Create the flagTable table
CREATE TABLE flagTable (
    entID VARCHAR(50) PRIMARY KEY,
    requestable BOOLEAN,
    FOREIGN KEY (entID) REFERENCES Entitlement(entID)
);

-- Insert sample data into the flagTable table
INSERT INTO flagTable (entID, requestable) VALUES
('ENT001', TRUE),
('ENT002', TRUE),
('ENT003', FALSE);



-- Create the Rules table
CREATE TABLE Rules (
    ruleID INT AUTO_INCREMENT PRIMARY KEY,
    expression VARCHAR(255),
    riskTier BIGINT,
    rangeValue VARCHAR(50), -- Renamed 'range' to 'rangeValue'
    ruleString VARCHAR(255)
);

-- Insert sample data into the Rules table
INSERT INTO Rules (expression, riskTier, rangeValue, ruleString) VALUES
('expression1', 1, '0-10', 'Rule for low risk'),
('expression2', 2, '10-20', 'Rule for medium risk'),
('expression3', 3, '20-30', 'Rule for high risk');


-- Create the RiskReference table
CREATE TABLE RiskReference (
    permission VARCHAR(50) PRIMARY KEY,
    riskTier BIGINT
);

-- Insert sample data into the RiskReference table
INSERT INTO RiskReference (permission, riskTier) VALUES
('READ', 1),
('WRITE', 2),
('DELETE', 3);


-- Create the RiskReference table
CREATE TABLE RiskReference (
    permission VARCHAR(50) PRIMARY KEY,
    riskTier BIGINT
);

-- Insert sample data into the RiskReference table
INSERT INTO RiskReference (permission, riskTier) VALUES
('READ', 1),
('WRITE', 2),
('DELETE', 3);

-- Option 1: Drop the existing ExceptionTable and recreate it
DROP TABLE IF EXISTS ExceptionTable;

CREATE TABLE ExceptionTable (
    entID VARCHAR(50),
    anomalyID BIGINT,
    justification TEXT,
    PRIMARY KEY (entID),
    FOREIGN KEY (entID) REFERENCES Entitlement(entID),
    FOREIGN KEY (anomalyID) REFERENCES AnomalyLog(anomalyID)
);

-- Option 1: Drop the existing ActiveAnomalies table and recreate it
DROP TABLE IF EXISTS ActiveAnomalies;

CREATE TABLE ActiveAnomalies (
    anomalyID BIGINT PRIMARY KEY,
    anomalyType VARCHAR(100),
    anomolousEntID VARCHAR(50),
    status VARCHAR(50),
    comments VARCHAR(255),
    anomolousPermission TEXT,
    incorrectRiskTier BIGINT,
    correctRiskTier BIGINT,
    startTime TIMESTAMP,
    endTime TIMESTAMP,
    FOREIGN KEY (anomolousEntID) REFERENCES Entitlement(entID)
);

-- Insert sample data into ExceptionTable
INSERT INTO ExceptionTable (entID, anomalyID, justification)
VALUES
('ENT001', 1, 'Marked as exception due to special business rules.'),
('ENT002', 2, 'Temporary exception until policy update.');

-- Insert sample data into ActiveAnomalies table
INSERT INTO ActiveAnomalies (anomalyID, anomalyType, anomolousEntID, status, comments, anomolousPermission, incorrectRiskTier, correctRiskTier, startTime, endTime)
VALUES
(1, 'Type 1', 'ENT001', 'pending', 'Pending review by DBA.', 'READ, WRITE', 1, 3, '2024-06-15 10:00:00', NULL),
(2, 'Type 2', 'ENT002', 'dba admin action pending', 'Requires immediate attention.', 'READ', 2, 4, '2024-06-16 12:00:00', NULL),
(3, 'Type 1', 'ENT003', 'pending', 'Under investigation.', 'WRITE, DELETE', 1, 2, '2024-06-17 08:00:00', NULL);

select * from ExceptionTable;
select * from ActiveAnomalies;
select * from anomalylog;

TRUNCATE TABLE ExceptionTable;
-- Truncate the anomalyLog table
SET foreign_key_checks = 0;
TRUNCATE TABLE anomalylog;
SET foreign_key_checks = 1;


-- Add a new column to ActiveAnomalies table
ALTER TABLE ActiveAnomalies
ADD COLUMN anomalyLevel INT DEFAULT 0;

-- Adding the anomalyLevel column to ActiveAnomalies table
ALTER TABLE ActiveAnomalies
ADD COLUMN anomalyLevel INT DEFAULT 0;

-- Insert sample data into ActiveAnomalies table with the new anomalyLevel column
INSERT INTO ActiveAnomalies (anomalyID, anomalyType, anomolousEntID, status, comments, anomolousPermission, incorrectRiskTier, correctRiskTier, startTime, endTime, anomalyLevel)
VALUES
(4, 'Type 1', 'ENT001', 'pending', 'Pending review by DBA.', 'READ, WRITE', 1, 3, '2024-06-15 10:00:00', NULL, 0),
(5, 'Type 2', 'ENT002', 'pendingDBAApproval', 'Requires immediate attention.', 'READ', 2, 4, '2024-06-16 12:00:00', NULL, 1),
(6, 'Type 1', 'ENT003', 'under investigation', 'Under investigation.', 'WRITE, DELETE', 1, 2, '2024-06-17 08:00:00', NULL, 0);

select * from activeanomalies;
select * from anomalylog;
select * from flagtable;
select * from riskreference;
select * from entitlement;
